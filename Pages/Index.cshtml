@page
@using IMDb.Models
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}


<div class="container-fluid text-center">
    <h1 class="display-4 p-2">Welcome, your Dashboard is ready!</h1>
    <p>Here you'll find relevant information about your database. all the statistics here are available on default</p>
    <div class="card col-3 col-md-10">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">#</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
    <div class="row">
        <div class="col-8">
            <div class="col py-2">
                <div class="card">
                    <div class="card-body">
                        <canvas id="Genre-Popularity"></canvas>
                    </div>
                <form class="form-floating" method="post" asp-page-handler="Genre">
                    <select asp-for="selectedGenre" class="form-select" id="floatingSelect" aria-label="Floating label select example" onchange="this.form.submit()">
                        <option selected>Open this select menu</option>
                            @foreach (var gp in Model.allGenres)
                            {
                              <option value="@gp.genreName"> @gp.genreName </option>
                            }
                    </select>
                    <label for="floatingSelect">select genre</label>
                </form>
                </div>
                
            </div>
            <div class="col py-2">
                <div class="card card-body">
                    <div class="card-body">
                        <canvas id="genreRating-chart" height="600"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-4 py-2">
            <div class="card text-white bg-light">
                <div class="card-body">
                    <canvas id="bar-chart" height="800"></canvas>
                </div>
            </div>
        </div>  
    </div>
       

</div>
@*here i include chart.js for graphs in our application*@
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var xValues = [];
    var xLabels = [];
    var xValues2 = [];
    var xLabels2 = [];
    var xColors = [];
    var gpValues = [];
    var gpLabels = [];
    const randColor = () => {
        return "#" + Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0').toUpperCase();
    }

</script>

@foreach (Genre g in Model.genres)
{
    <script>
        xColors.push(randColor());
        xValues.push("@g.titleCount");
        xLabels.push("@g.genreName");
    </script>
}
 @foreach (genrePopularity gp in Model.genrePopularities)
    {
            <script>
            gpValues.push("@gp.number_of_votes");
            gpLabels.push("@gp.startYear");
    </script>
    }
<script>
    xValues2 = [@Model.genre.avgRating];    
    xLabels2 = ["@Model.genre.genreName"];

    //sorting the arrays real quick
    // Create an array of objects with label and data values
    let dataArr = [];
    for (let i = 0; i < xLabels.length; i++) {
        dataArr.push({
            label: xLabels[i],
            data: xValues[i]
        });
    }

    // Sort the array of objects based on label value
    dataArr.sort(function(a, b) {
        return -(a.data - b.data);
    });

    // Update the labels and data arrays with the sorted values
    xLabels = dataArr.map(function(item) {
        return item.label;
    });
    xValues = dataArr.map(function(item) {
        return item.data;
    });

    //sorting the arrays real quick
    // Create an array of objects with label and data values
     dataArr = [];
    for (let i = 0; i < xLabels2.length; i++) {
        dataArr.push({
            label: xLabels2[i],
            data: xValues2[i]
        });
    }

    // Sort the array of objects based on label value
    dataArr.sort(function(a, b) {
        return -(a.data - b.data);
    });

    // Update the labels and data arrays with the sorted values
    xLabels2 = dataArr.map(function(item) {
        return item.label;
    });
    xValues2 = dataArr.map(function(item) {
        return item.data;
    });










    new Chart(document.getElementById("bar-chart"), {
        type: 'bar',
        data: {

            labels: xLabels,
            datasets: [
                {
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(255, 159, 64, 0.2)',
                        'rgba(255, 205, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(201, 203, 207, 0.2)'
                    ],
                    borderColor: [
                        'rgb(255, 99, 132)',
                        'rgb(255, 159, 64)',
                        'rgb(255, 205, 86)',
                        'rgb(75, 192, 192)',
                        'rgb(54, 162, 235)',
                        'rgb(153, 102, 255)',
                        'rgb(201, 203, 207)'
                    ],
                    borderWidth: 1,
                    barThickness: 15,
                    label: "Movies per category",
                    data: xValues
                }
            ]
        },
        options: {
            indexAxis: 'y',
            scales: {
                x: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 250000,
                    }
                },
            },
            maintainAspectRatio: false,
            legend: { display: false },
            title: {
                display: true,
                text: 'number of movies released per category per year for 6 years'
            }
        }
    });



    new Chart(document.getElementById("Genre-Rating"), {
        type: 'bar',
        data: {

            labels: xLabels2,
            datasets: [
                {
                    label: "Rating per category",
                    backgroundColor: xColors,
                    data: xValues2,
                }
            ]
        },
        options: {
            indexAxis: 'y',
            scales: {
                x: {
                    beginAtZero: true,
                },
            },
            maintainAspectRatio: false,
            legend: { display: false },
            title: {
                display: true,
                text: 'number of movies released per category per year for 6 years'
            }
        }
    });

    var xValues = ["Normal movies in db"];
    var yValues = [@Model.moviecount  ];
    var barColors = [
        "#b91d47",
        "#00aba9",
        "#2b5797",
        "#e8c3b9",
        "#1e7145"
    ];
    xValues2.push(10-xValues2[0])
    new Chart(document.getElementById("genreRating-chart"), {
        type: "pie",
        data: {
            labels: xLabels2,
            datasets: [{
                backgroundColor: barColors,
                data: xValues2
            }]
        },
        options: {
            title: {
                display: true,
                text: "Average rating for this category"
            }
        }
    });

   
    new Chart(document.getElementById("Genre-Popularity"), {
        type: 'line',
        data: {
            
            labels: gpLabels,
            datasets: [
                {
                    label: "Number of votes per category",
                    data: gpValues,
                    fill: true,
                }
            ]
        },
        options: {
            title: {
                display: true,
                text: 'popularity of a genre'
            }
        }
    });
</script>