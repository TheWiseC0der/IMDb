@page
@using IMDb.Models
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}


<div class="container-fluid text-center">
    <h1 class="display-4 p-2">Welcome, your Dashboard is ready!</h1>
    <p>Here you'll find relevant information about your database. all the statistics here are available on default</p>
    <div class="card col-3 col-md-10">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">#</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
    <div class="row">
        <div class="col-sm-4 py-2">
            <div class="card card-body h-100">
                <div class="h-100">
                    <canvas id="record-chart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-sm-4 py-2">
            <div class="card h-100 text-white">
                <div class="card-body">
                    <canvas id="bar-chart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-sm-4 py-2">
            <div class="card h-100 card-body">
                <div class="h-100">
                    <canvas id="Genre-Rating"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>
@*here i include chart.js for graphs in our application*@
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var xValues = [];
    var xLabels = [];
    var xValues2 = [];
    var xLabels2 = [];
    var xColors = [];
    const randColor = () => {
        return "#" + Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0').toUpperCase();
    }

</script>

@foreach (Genre g in Model.genres)
{
    <script>
        xColors.push(randColor());
        xValues.push("@g.titleCount");
        xLabels.push("@g.genreName");
    </script>
}
<script>
    xValues2 = [6.9548260047158603, 6.3853054911059406, 7.0501656548633385, 7.0813475414535976, 7.1731594585671798, 6.937440780746492, 7.0957297329120124, 7.2379703689008172, 6.9876011898273207, 7.0804801927342016, 7.0077351772537133, 6.5021226415094464, 6.8911806753759048, 7.3083091522233889, 6.0792107513092093, 7.0387509573653571, 6.4996567954501066, 7.1292489776488983, 6.56722325817932, 6.019933554817275, 6.7794874507284996, 6.8139626257813184, 6.7820800015452734, 6.7921782070414585, 6.7791922915137781, 7.0102543554006969, 6.8898817677965397];
    xLabels2 = ["Action", "Adult", "Adventure", "Animation", "Biography", "Comedy", "Crime", "Documentary", "Drama", "Family", "Fantasy", "Film-Noir", "Game-Show", "History", "Horror", "Music", "Musical", "Mystery", "News", "Reality-TV", "Romance", "Sci-Fi", "Short", "Sport", "Talk-Show", "Thriller", "War", "Western"]


    //sorting the arrays real quick
    // Create an array of objects with label and data values
    let dataArr = [];
    for (let i = 0; i < xLabels.length; i++) {
        dataArr.push({
            label: xLabels[i],
            data: xValues[i]
        });
    }

    // Sort the array of objects based on label value
    dataArr.sort(function(a, b) {
        return -(a.data - b.data);
    });

    // Update the labels and data arrays with the sorted values
    xLabels = dataArr.map(function(item) {
        return item.label;
    });
    xValues = dataArr.map(function(item) {
        return item.data;
    });

    //sorting the arrays real quick
    // Create an array of objects with label and data values
     dataArr = [];
    for (let i = 0; i < xLabels2.length; i++) {
        dataArr.push({
            label: xLabels2[i],
            data: xValues2[i]
        });
    }

    // Sort the array of objects based on label value
    dataArr.sort(function(a, b) {
        return -(a.data - b.data);
    });

    // Update the labels and data arrays with the sorted values
    xLabels2 = dataArr.map(function(item) {
        return item.label;
    });
    xValues2 = dataArr.map(function(item) {
        return item.data;
    });










    new Chart(document.getElementById("bar-chart"), {
        type: 'bar',
        data: {

            labels: xLabels,
            datasets: [
                {
                    barThickness: 20,
                    label: "movies in db of this category",
                    backgroundColor: xColors,
                    data: xValues
                }
            ]
        },
        options: {
            indexAxis: 'y',
            scales: {
                x: {
                    beginAtZero: true,
                },
            },
            maintainAspectRatio: false,
            legend: { display: false },
            title: {
                display: true,
                text: 'number of movies released per category per year for 6 years'
            }
        }
    });



    new Chart(document.getElementById("Genre-Rating"), {
        type: 'horizontalBar',
        data: {

            labels: xLabels2,
            datasets: [
                {
                    label: "movies in db of this category",
                    backgroundColor: xColors,
                    data: xValues2,
                }
            ]
        },
        options: {
            scales: {
                x: {
                    beginAtZero: true,
                },
            },
            maintainAspectRatio: false,
            legend: { display: false },
            title: {
                display: true,
                text: 'number of movies released per category per year for 6 years'
            }
        }
    });

    var xValues = ["Normal movies in db"];
    var yValues = [@Model.moviecount  ];
    var barColors = [
        "#b91d47",
        "#00aba9",
        "#2b5797",
        "#e8c3b9",
        "#1e7145"
    ];

    new Chart("myChart", {
        type: "pie",
        data: {
            labels: xValues,
            datasets: [{
                backgroundColor: barColors,
                data: yValues
            }]
        },
        options: {
            title: {
                display: true,
                text: "World Wide Wine Production 2018"
            }
        }
    });
    new Chart("record-chart", {
        type: "pie",
        data: {
            labels: xValues,
            datasets: [{
                backgroundColor: barColors,
                data: yValues
            }]
        },
        options: {
            title: {
                display: true,
                text: "Records in db per table"
            }
        }
    });


</script>